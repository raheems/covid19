[
["projection.html", "Report 4 Projections 4.1 Projection for Bangladesh (unofficial)", " Report 4 Projections 4.1 Projection for Bangladesh (unofficial) Last updated: 2020-04-17 This is a dynamic document and will be updated frequently. Please check back for latest projection. This projection is based on unofficial Bangladesh incidence data. 4.1.1 Methodology This projection is based on an SEIR model. Here, the S stands for Susceptible, E stands for Exposed/infected but asymptomatic, I stands for Infected and symptomatic, and R stands for Recovered. N is the population size. Assuming there is no births or deaths in a population, (known as a closed population), the model is formulated by the following differential equations. \\[ \\begin{align} \\frac{\\partial S}{\\partial t} &amp; = -\\frac{\\beta I S}{N} \\\\ \\frac{\\partial E}{\\partial t} &amp;= \\frac{\\beta I S}{N} -\\sigma E \\\\ \\frac{\\partial I}{\\partial t} &amp;= \\sigma E - \\gamma I \\\\ \\frac{\\partial R}{\\partial t} &amp;= \\gamma I \\end{align} \\] Here the parameters \\(\\beta\\) controls the transition from susceptible to the Exposed compartment, \\(\\sigma\\) controls the transition from E to I, and \\(\\gamma\\) controls the transition from I to R. The reproduction rate, \\(R_0\\) can be approximated by \\[R_0 = \\frac{\\beta}{\\gamma}\\] Model was fitted using all but the last two dayâ€™s incidences to obtain the estimated \\(\\beta\\) and \\(\\gamma\\). The fitted model was used for prediction. This post was inspired by Churches (2020), where you will find some details on the computation. 4.1.2 Ascertainment Rate Not all the cases are reported or tested. Usually a fraction of the actual cases are detected. This is known as ascertainment rate. We consider 25%, 50%, 75% amd 90% ascertainment rate when fitting the model. Simply, the incidences are inflated by the inverse of the ascertainment rate. It turns out that the bottom left one fits the current data best. So lets put that figure on a bigger canvas. 4.1.3 Projection for the next 5 days Table 4.1: Predicted new cases for the next 5 days Date Actual daily cases Projected daily cases Actual cumulative cases Projected cumulative cases 36 2020-04-12 139 156 621 911 37 2020-04-13 182 188 803 1099 38 2020-04-14 209 227 1012 1326 39 2020-04-15 219 273 1231 1599 40 2020-04-16 341 330 1572 1929 41 2020-04-17 NA 397 NA 2326 42 2020-04-18 NA 480 NA 2806 43 2020-04-19 NA 579 NA 3385 44 2020-04-20 NA 698 NA 4083 45 2020-04-21 NA 842 NA 4925 4.1.4 Projection for 100 days into the future Assuming the situation will remain like this including the interventions currently in place, the 100 day projection suggests that the the peak of the epidemic will be around the middle of June. The trajectory also suggests that the epidemic will end by end of July or early August. 4.1.5 R code for fitting SEIR Please let me know if you find any error in it. The code was adapted from Churches (2020) library(deSolve) library(grid) library(gridExtra) ###################################### ## SIER Modeling ------- ###################################### # Parameters # beta = rate of expusore from susceptible infected contact # sigma = rate at which exposed person becomes infected # gamma = rate at which infected person recovers # S = Initial susceptible population # E = Initial exposed population # I = Initial infected population # R = Recovered population SEIR &lt;- function(time, state, parameters) { par &lt;- as.list(c(state, parameters)) with(par, { dS &lt;- -beta * I * S/N dE &lt;- beta * I * S/N - sigma * E dI &lt;- sigma * E - gamma * I dR &lt;- gamma * I list(c(dS, dE, dI, dR)) }) } # define a function to calculate the residual sum of squares # (RSS), passing in parameters beta and gamma that are to be # optimised for the best fit to the incidence data RSS &lt;- function(parameters) { names(parameters) &lt;- c(&quot;beta&quot;, &quot;sigma&quot;, &quot;gamma&quot;) out &lt;- ode(y = init, times = Day, func = SEIR, parms = parameters) fit &lt;- out[, 4] sum((infected - fit)^2) } fit_seir &lt;- function(country_name=&#39;Bangladesh(unoff)&#39;, N=170000000, af=0.5, npast=2, nfuture=10){ # country = Country name # N = population size of the country # af = ascertainment factor, default = 0.5 # country = &quot;Bangladesh(unoff)&quot; # npast = number of days in the past to exclude when fitting the model # default is npast = 5 # nfuture = number of days in the future the algorithm to predict to # default is nfuture=10 SEIR &lt;- function(time, state, parameters) { par &lt;- as.list(c(state, parameters)) with(par, { dS &lt;- -beta * I * S/N dE &lt;- beta * I * S/N - sigma * E dI &lt;- sigma * E - gamma * I dR &lt;- gamma * I list(c(dS, dE, dI, dR)) }) } # define a function to calculate the residual sum of squares # (RSS), passing in parameters beta, sigma, and gamma that are to be # optimised for the best fit to the incidence data RSS &lt;- function(parameters) { names(parameters) &lt;- c(&quot;beta&quot;, &quot;sigma&quot;, &quot;gamma&quot;) out &lt;- ode(y = init, times = Day, func = SEIR, parms = parameters) fit &lt;- out[, 4] sum((infected - fit)^2) } country = enquo(country_name) df &lt;- bd_unoff %&gt;% filter(country == !!country, cum_cases&gt;0) infected &lt;- df %&gt;% filter(date &gt;= min(date), date &lt;= today() - 1 - npast) %&gt;% pull(cum_cases) R = 0; E=0; I = infected[1]; S = N - E - I - R seir_start_date &lt;- df %&gt;% pull(date) %&gt;% min() # Ascertainment factor infected = infected * 1/af # Create an incrementing Day vector the same length as our # cases vector Day &lt;- 1:(length(infected)) # now specify initial values for S, I and R init &lt;- c(S = S, E=E, I=I, R=R) # now find the values of beta, sigma. and gamma that give the # smallest RSS, which represents the best fit to the data. # We perform a constrined optimization with initial parameters # set as .5. We bound the params within 0.01 and 0.999 (I&#39;ve made # the choice). Feel free to change it to c(0, 1). But you may face # issues with convergence opt &lt;- optim(c(.5, .5, .5), RSS, method = &quot;L-BFGS-B&quot;, lower = c(0.01,0.01,0.01), upper = c(.999, .999, .999), control=list(maxit = 1000)) # check for convergence opt_msg = opt$message opt_par &lt;- setNames(opt$par, c(&quot;beta&quot;, &quot;sigma&quot;, &quot;gamma&quot;)) beta = opt_par[&quot;beta&quot;] gamma = opt_par[&quot;gamma&quot;] sigma = opt_par[&quot;sigma&quot;] R0 = as.numeric(beta/gamma) # there is a more complex formula # time in days for predictions t &lt;- 1:(as.integer(today() - seir_start_date) + nfuture) # get the fitted values from our SEIR model odefit = ode(y = init, times = t, func = SEIR, parms = opt_par) fitted_cases &lt;- data.frame(odefit) # add a Date column and join the observed incidence data fitted_cases &lt;- fitted_cases %&gt;% mutate(date = seir_start_date + days(t - 1)) %&gt;% left_join(df %&gt;% filter(cum_cases&gt;0) %&gt;% ungroup() %&gt;% select(date, cum_cases)) # Return list(country=country_name, infected = infected, opt_msg=opt_msg, opt_par = opt_par, R0=R0, opt_msg=opt_msg, fitted_cases=fitted_cases, N=N, af=af) } References "]
]
